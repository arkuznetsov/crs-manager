#Использовать crs-api

// TODO: нужно нормально рассортировать по модулям

Функция СписокПользователейПоХранилищу(Хранилище) Экспорт
	
	Если Хранилище = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ОшибкаПодключения = "";
	КлиентХранилища = НовыйКлиентХранилища(Хранилище, ОшибкаПодключения);
	Если КлиентХранилища = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Не удалось подключиться к хранилищу %1 по причине:%2%3",
		                        ОбщегоНазначения.ПутьКХранилищуКонфигурации(Хранилище),
		                        Символы.ПС,
		                        ОшибкаПодключения);
		Сообщить(ТекстОшибки);
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат КлиентХранилища.СписокПользователей();
	
КонецФункции

Функция НовыйКлиентХранилища(ХранилищеКонфигурации, Ошибка = "") Экспорт
	
	СерверХранилища = СерверХранилищКонфигурацийПоИд(ХранилищеКонфигурации.Сервер);

	КлиентХранилища = Новый КлиентХранилища(СерверХранилища.Адрес, СерверХранилища.ВерсияПлатформы);
	Попытка
		Если Не ПустаяСтрока(ХранилищеКонфигурации.Путь) Тогда
			КлиентХранилища.Подключиться(ХранилищеКонфигурации.Пользователь, ХранилищеКонфигурации.Пароль, ХранилищеКонфигурации.Путь);
		Иначе
			КлиентХранилища.Подключиться(ХранилищеКонфигурации.Пользователь, ХранилищеКонфигурации.Пароль);
		КонецЕсли;
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат КлиентХранилища;

КонецФункции

Функция ХранилищеКонфигурацииПоИд(Знач Идентификатор) Экспорт
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Идентификатор;
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = Число(Идентификатор);
	КонецЕсли;
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Идентификатор", Значение);
	
	Возврат МенеджерБазДанных.МенеджерСущностей.ПолучитьОдно(Тип("ХранилищеКонфигурации"), Отбор);
	
КонецФункции

Функция СерверХранилищКонфигурацийПоИд(Знач Идентификатор) Экспорт
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Идентификатор;
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = Число(Идентификатор);
	КонецЕсли;
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Идентификатор", Значение);
	
	Возврат МенеджерБазДанных.МенеджерСущностей.ПолучитьОдно(Тип("СерверХранилищ"), Отбор);
	
КонецФункции

Функция ПутьКХранилищуКонфигурации(Хранилище) Экспорт
	
	Если Хранилище = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СерверХранилищ = СерверХранилищКонфигурацийПоИд(Хранилище.Сервер);

	Ссылка = СокрЛП(СерверХранилищ.Адрес);

	Если НЕ (Прав(Ссылка, 1) = "\" ИЛИ Прав(Ссылка, 1) = "/") Тогда
		Ссылка = Ссылка + "/";
	КонецЕсли;

	Путь = СокрЛП(Хранилище.Путь);
	Если Лев(Путь, 1) = "\" ИЛИ Лев(Путь, 1) = "/" Тогда
		Путь = Сред(Путь, 2);
	КонецЕсли;

	Возврат Ссылка + Путь;

КонецФункции

Функция ПутьКХранилищуКонфигурацииПоИд(Знач Идентификатор) Экспорт
	
	Хранилище = ХранилищеКонфигурацииПоИд(Идентификатор);

	Если Хранилище = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПутьКХранилищуКонфигурации(Хранилище);
	
КонецФункции

Функция МодельСтраницы(Знач Заголовок) Экспорт
	Модель = Новый Структура;
	Модель.Вставить("Заголовок", Заголовок);
	Возврат Модель;
КонецФункции

Функция СписокХранилищКонфигурации() Экспорт
	Возврат МенеджерБазДанных.МенеджерСущностей.Получить(Тип("ХранилищеКонфигурации"));
КонецФункции

Функция СписокСерверовХранилищ() Экспорт
	Возврат МенеджерБазДанных.МенеджерСущностей.Получить(Тип("СерверХранилищ"));
КонецФункции

Функция СписокВерсийПоХранилищу(Хранилище) Экспорт

	Если Хранилище = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ОшибкаПодключения = "";
	КлиентХранилища = НовыйКлиентХранилища(Хранилище, ОшибкаПодключения);
	Если КлиентХранилища = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Не удалось подключиться к хранилищу %1 по причине:%2%3",
		                        ОбщегоНазначения.ПутьКХранилищуКонфигурации(Хранилище),
		                        Символы.ПС,
		                        ОшибкаПодключения);
		Сообщить(ТекстОшибки);
		Возврат Новый Массив;
	КонецЕсли;

	Возврат КлиентХранилища.СписокВерсий();

КонецФункции

Функция ЭтоСлужебныйПользовательХранилища(Хранилище, Знач ИдентификаторПроверяемогоПользователя) Экспорт

	Если Хранилище = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ОшибкаПодключения = "";
	КлиентХранилища = НовыйКлиентХранилища(Хранилище, ОшибкаПодключения);
	Если КлиентХранилища = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Не удалось подключиться к хранилищу %1 по причине:%2%3",
		                        ОбщегоНазначения.ПутьКХранилищуКонфигурации(Хранилище),
		                        Символы.ПС,
		                        ОшибкаПодключения);
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Пользователь = КлиентХранилища.НайтиПользователя(Хранилище.Пользователь);
	Если Пользователь = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Пользователь.Идентификатор = ИдентификаторПроверяемогоПользователя;

КонецФункции

Функция НайтиПользователяПоИдентификатору(Хранилище, ИдентификаторПользователя) Экспорт
	Пользователь = Неопределено;
	СписокПользователей = СписокПользователейПоХранилищу(Хранилище);
	Для Каждого ПользовательИзСписка Из СписокПользователей Цикл
		Если ПользовательИзСписка.Идентификатор = ИдентификаторПользователя Тогда
			Пользователь = ПользовательИзСписка;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	Возврат Пользователь;
КонецФункции

Функция ИдентификаторХранилищаИзКонтроллера(Контроллер) Экспорт
	ИдентификаторХранилища = Контроллер.ЗначенияМаршрута.Получить("repo");
	Если ИдентификаторХранилища <> Неопределено Тогда
		ИдентификаторХранилища = Число(ИдентификаторХранилища);	
	КонецЕсли;
	Возврат ИдентификаторХранилища;
КонецФункции

Функция ИдентификаторСервераХранилищИзКонтроллера(Контроллер) Экспорт
	ИдентификаторСервера = Контроллер.ЗначенияМаршрута.Получить("reposerver");
	Если ИдентификаторСервера <> Неопределено Тогда
		ИдентификаторСервера = Число(ИдентификаторСервера);	
	КонецЕсли;
	Возврат ИдентификаторСервера;
КонецФункции

Функция СоответствиеРолейХранилища() Экспорт
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ТолькоПросмотр", РолиХранилища.ТолькоПросмотр);
	Соответствие.Вставить("Разработчик", РолиХранилища.Разработчик);
	Соответствие.Вставить("РазработчикРасширенный", РолиХранилища.РазработчикРасширенный);
	Соответствие.Вставить("Администратор", РолиХранилища.Администратор);
	Возврат Соответствие;
КонецФункции